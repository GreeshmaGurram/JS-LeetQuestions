/**
 * @param {Promise} promise1
 * @param {Promise} promise2
 * @return {Promise}
 */
//  Promises 3 states: pending, fulfilled, rejected
// .then() ==> handles fulfilled state, .catch() ==> handles rejected state, .finally() ==> runs code that will be executed irrespective of success or failure of promise
//  let myPromise = new Promise(resolveFunc, rejectFunc)
// i.e., let myPromise = () => { return new Promise((resolve, reject) => {setTimeout(() => {resolve()}, 1000 )})}
// console.log(myPromise.then())
//  or simplified way is let myPromise = async( () => {
    // const p1 = fetch(url)
    // const res = await p1 
// })
var addTwoPromises = async function(promise1, promise2) {
    let p1 = await promise1.then((val) => {
       return val
    })
    let p2 = await promise2.then((val) => {
        return val
    })
    return p1 + p2;
};

/**
 * addTwoPromises(Promise.resolve(2), Promise.resolve(2))
 *   .then(console.log); // 4
 */
